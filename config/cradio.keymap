#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NUM 1
#define SYM 2
#define NAV 3
#define MOU 4
#define SHF 5
#define FUN 6

// docs: https://zmk.dev/docs/behaviors/hold-tap
#define TAPPING_TERM_MS 220 // how long a key must be pressed to trigger hold behavior.
// tapping twice quickly and holding on the second tap sends key repeat
#define QUICK_TAP_MS 100
#define COMBO_TERM_MS 40

// For layer toggle I use the default 200 ms timout with tap-preferred flavor, this means layer will be activated only if thumb key is pressed for timeout duration before released

/ {
	macros {
        ao_lower: ao_lower_macro {
            label = "ao_lower";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            wait-ms = <40>;
            bindings
                = <&macro_press   &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp E>
                , <&macro_tap     &kp N5>
                , <&macro_tap     &kp RET>;
        };
        ae_lower: ae_lower_macro {
            label = "ae_lower";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            wait-ms = <40>;
            bindings
                = <&macro_press   &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp E>
                , <&macro_tap     &kp N4>
                , <&macro_tap     &kp RET>;
        };
        oe_lower: oe_lower_macro {
            label = "oe_lower";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            wait-ms = <40>;
            bindings
                = <&macro_press   &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp F>
                , <&macro_tap     &kp N6>
                , <&macro_tap     &kp RET>;
        };
        // For some reason I need to start by releasing shift otherwise hex sequence is capitilized, since shift was being held at start of sequence I press it at the end of sequence to restore state
        // These macros seem to sometimes cause shift to get stuck pressed, requering a keyboard reset
        ao_upper: ao_upper_macro {
            label = "ao_upper";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            wait-ms = <40>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press   &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp C>
                , <&macro_tap     &kp N5>
                , <&macro_tap     &kp RET>;
        };
        ae_upper: ae_upper_macro {
            label = "ae_upper";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            wait-ms = <40>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press   &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp C>
                , <&macro_tap     &kp N4>
                , <&macro_tap     &kp RET>;
        };
        oe_upper: oe_upper_macro {
            label = "oe_upper";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <40>;
            wait-ms = <40>;
            bindings
                = <&macro_release &kp LSHFT>
                , <&macro_press   &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp U>
                , <&macro_release &kp LSHFT &kp LCTRL>
                , <&macro_tap     &kp D>
                , <&macro_tap     &kp N6>
                , <&macro_tap     &kp RET>;
        };
	};
};

/ {
    behaviors {
        clt: layer_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_LAYER_TOGGLE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <QUICK_TAP_MS>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&mo>, <&kp>;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&kp>, <&kp>;

        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&kp>, <&kp>;
        };
        ao: ao_mod_morph {
            label = "ao";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&ao_lower>, <&ao_upper>;
        };
        ae: ae_mod_morph {
            label = "ae";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&ae_lower>, <&ae_upper>;
        };
        oe: oe_mod_morph {
            label = "oe";
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&oe_lower>, <&oe_upper>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_ao {
            timeout-ms = <COMBO_TERM_MS>;
            key-positions = <10 19>;
            bindings = <&ao>;
        };
        combo_ae {
            timeout-ms = <COMBO_TERM_MS>;
            key-positions = <10 17>;
            bindings = <&ae>;
        };
        combo_oe {
            timeout-ms = <COMBO_TERM_MS>;
            key-positions = <17 19>;
            bindings = <&oe>;
        };
        combo_esc {
            timeout-ms = <COMBO_TERM_MS>;
            key-positions = <3 13>;
            bindings = <&kp ESC>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        shift {
            if-layers = <NUM NAV>;
            then-layer = <SHF>;
        };
        function {
            if-layers = <SYM MOU>;
            then-layer = <FUN>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp Q         &kp W         &kp F         &kp P         &kp B             &kp J         &kp L         &kp U         &kp Y         &kp APOS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &hml LCTRL A  &hml LALT R   &hml LGUI S   &hml LSHFT T  &kp G             &kp M         &hmr LSHFT N  &hmr LGUI E   &hmr LALT I   &hmr LCTRL O
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &kp COMMA     &kp DOT       &kp SLASH
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &clt NAV SPC  &clt MOU TAB       &clt SYM RET &clt NUM BSPC
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp BSLH      &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT          &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp N6        &kp N7        &kp N8        &kp N9        &kp N0            &none         &kp LSHFT     &kp LGUI      &kp LALT      &kp LCTRL
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5            &none         &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &clt NAV SEMI &kp GRAVE         &none         &none
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp PIPE      &kp UNDER     &kp PLUS      &kp LBRC      &kp RBRC          &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp CARET     &kp AMPS      &kp ASTRK     &kp LPAR      &kp RPAR          &none         &kp LSHFT     &kp LGUI      &kp LALT      &kp LCTRL
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &none         &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &kp COLON     &clt MOU TILDE    &none         &none
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        navigation_layer {
            label = "NAV";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &none         &none         &none         &none             &none         &ao           &ae           &oe           &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp LCTRL     &kp LALT      &kp LGUI      &kp LSHFT     &none             &none         &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none             &none         &kp HOME      &kp PG_DN     &kp PG_UP     &kp END
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none             &kp DEL       &clt NUM ESC
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        mouse_layer {
            label = "MOU";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &none         &none         &none         &none         &none             &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none             &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &none         &none         &none         &none         &none             &none         &none         &none         &none         &none
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none             &clt SYM RET  &none
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        shift_layer {
            label = "SHF";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp LS(Q)     &kp LS(W)     &kp LS(F)     &kp LS(P)     &kp LS(B)         &kp LS(J)     &kp LS(L)     &kp LS(U)     &kp LS(Y)     &kp LS(APOS)
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp LS(A)     &kp LS(R)     &kp LS(S)     &kp LS(T)     &kp LS(G)         &kp LS(M)     &kp LS(N)     &kp LS(E)     &kp LS(I)     &kp LS(O)
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp LS(Z)     &kp LS(X)     &kp LS(C)     &kp LS(D)     &kp LS(V)         &kp LS(K)     &kp LS(H)     &kp LS(COMMA) &kp LS(DOT)   &kp LS(SLASH)
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none             &none         &none
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp F11       &kp F12       &kp F13       &kp F14       &kp F15           &none         &none         &none         &none         &none
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp F6        &kp F7        &kp F8        &kp F9        &kp F10           &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &kp F1        &kp F2        &kp F3        &kp F4        &kp F5            &none         &none         &none         &none         &none        
// ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &none         &none             &none         &none
//                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

   };
};